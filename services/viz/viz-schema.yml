openapi: 3.0.1
info:
  title: Mitwelten Dashboard
  description: 'This service provides REST endpoints to exchange data from [Mitwelten](https://mitwelten.org) for the purpose of visualisation and map plotting.'
  contact:
    email: mitwelten.technik@fhnw.ch
  version: 1.0.0
externalDocs:
  description: Find out more about Mitwelten
  url: https://mitwelten.org

servers:
- url: https://data.mitwelten.org/v1

tags:
- name: entry
  description: Pins, added to the map
- name: node
  description: Deployed devices
- name: tag
  description: Tags
- name: data
  description: Sensor / Capture Data

paths:

  /entries:
    get:
      tags:
      - entry
      summary: List all entries
      operationId: listEntries
      parameters:
      - name: timeFrom
        in: query
        description: Start of time range
        schema:
          type: string
          format: date-time
          example: '2022-01-01T00:00:00.000Z'
      - name: timeTo
        in: query
        description: End of time range
        schema:
          type: string
          format: date-time
          example: '2022-12-31T23:59:59.999Z'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
        400:
          description: Invalid status value
          content: {}
      security:
      - mitwelten_auth: []

  /entry:
    post:
      tags:
      - entry
      summary: Add a new entry to the map
      operationId: addEntry
      requestBody:
        description: Entry object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entry'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - mitwelten_auth: []

  /entry/{id}:
    get:
      tags:
      - entry
      summary: Find entry by ID
      description: Returns a single entry
      operationId: getEntryById
      parameters:
      - name: id
        in: path
        description: ID of tag to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Entry not found
          content: {}
      security:
      - mitwelten_auth: []

    patch:
      tags:
      - entry
      summary: Updates an entry
      operationId: updateEntry
      parameters:
      - name: id
        in: path
        description: ID of entry that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Entry object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entry'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Entry not found
          content: {}
        405:
          description: Invalid input
          content: {}
      security:
      - mitwelten_auth: []

    delete:
      tags:
      - entry
      summary: Deletes an entry
      operationId: deleteEntry
      parameters:
      - name: id
        in: path
        description: Entry ID of record to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Entry not found
          content: {}
      security:
      - mitwelten_auth: []

  /entry/{id}/uploadFile: # todo, same like this: add comment, add tag
    post:
      tags:
      - entry
      summary: uploads a file
      operationId: uploadFile
      parameters:
      - name: id
        in: path
        description: ID of entry to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Entry not found
          content: {}
        405:
          description: Invalid input
          content: {}
      security:
      - mitwelten_auth: []

  /entry/{id}/addTag:
    post:
      tags:
      - entry
      summary: Adds a tag for an entry
      operationId: addTagToEntry
      parameters:
      - name: id
        in: path
        description: ID of entry to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Tag object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Entry not found
          content: {}
        405:
          description: Invalid input
          content: {}
      security:
      - mitwelten_auth: []

  /tags:
    get:
      tags:
      - tag
      summary: List all tags
      operationId: listTags
      parameters:
      - name: timeFrom
        in: query
        description: Start of time range
        schema:
          type: string
          format: date-time
          example: '2022-01-01T00:00:00.000Z'
      - name: timeTo
        in: query
        description: End of time range
        schema:
          type: string
          format: date-time
          example: '2022-12-31T23:59:59.999Z'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        400:
          description: Invalid range parameter(s)
          content: {}
      security:
      - mitwelten_auth: []

  /tag:
    put:
      tags:
      - tag
      summary: Add a new tag or update an existing one
      operationId: putTag
      requestBody:
        description: Tag that needs to be added/updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - mitwelten_auth: []

  /tag/{id}:
    get:
      tags:
      - tag
      summary: Find tag by ID
      description: Returns a single tag
      operationId: getTagById
      parameters:
      - name: id
        in: path
        description: ID of tag to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Tag not found
          content: {}
      security:
      - mitwelten_auth: []
    delete:
      tags:
      - tag
      summary: Deletes a tag
      operationId: deleteTag
      parameters:
      - name: id
        in: path
        description: Tag ID of record to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Tag not found
          content: {}
      security:
      - mitwelten_auth: []

  /nodes:
    get:
      tags:
      - node
      summary: List all nodes
      operationId: listNodes
      parameters:
      - name: timeFrom
        in: query
        description: Start of time range
        schema:
          type: string
          format: date-time
          example: '2022-01-01T00:00:00.000Z'
      - name: timeTo
        in: query
        description: End of time range
        schema:
          type: string
          format: date-time
          example: '2022-12-31T23:59:59.999Z'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        400:
          description: Invalid range parameter(s)
          content: {}
      security:
      - mitwelten_auth: []

  /data/{node_label}:
    get:
      tags:
      - data
      summary: List sensor / capture data in timestamp ascending order
      operationId: listData
      parameters:
      - name: node_label
        in: path
        required: true
        description: Node label for which data should be listed for
        schema:
          type: string
          pattern: '\d{4}-\d{4}'
          example: '2323-4242'
      - name: timeFrom
        in: query
        description: Start of time range
        schema:
          type: string
          format: date-time
          example: '2022-01-01T00:00:00.000Z'
      - name: timeTo
        in: query
        description: End of time range
        schema:
          type: string
          format: date-time
          example: '2022-12-31T23:59:59.999Z'
      - name: limit
        in: query
        description: Number of data to be returned
        schema:
          type: integer
          format: int64
          maximum: 65536
          minimum: 1
          default: 32768
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/PaxDatum'
                  - type: array
                    items:
                      $ref: '#/components/schemas/EnvDatum'
        400:
          description: Invalid label format or range parameter(s)
          content: {}
        404:
          description: Node node found with this label
          content: {}
      security:
      - mitwelten_auth: []

################################## COMPONENTS ##################################

components:
  schemas:

    Entry:
      required:
      - name
      - location
      type: object
      properties:
        id:
          type: integer
          format: int64
        date:
          type: string
          format: date-time
          example: '2022-12-31T23:59:59.999Z'
        name:
          type: string
          example: interesting
        description:
          type: string
          example: I discovered an correlation between air humidity level and visitor count
        location:
          $ref: '#/components/schemas/Point'
        type:
          type: string
          example: env
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        comments: # example, will be removed in the future (comments can be added to anything)
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        fileUrls:
          type: array
          items:
            type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

    Node:
      required:
      - name # label
      - location
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
        name: # label
          type: string
          pattern: '\d{4}-\d{4}'
          example: '2323-4242'
        location:
          $ref: '#/components/schemas/Location'
        type:
          type: string
          example: env
          enum:
          - env
          - cam
          - pax
          - audiomoth
          - accesspoint
          - appliance
          - air
        description:
          type: string
          example: Environmental sensor to record humidity, temperature and athmospheric pressure

    Comment:
      type: object
      required:
      - comment
      - timeStart
      properties:
        id:
          type: integer
          format: int64
        comment:
          type: string
          example: interesting
        timeStart:
          type: string
          format: date-time
        timeEnd:
          type: string
          format: date-time
        author:
          type: string

    Location:
      type: object
      required:
      - location
      properties:
        id:
          type: integer
          format: int64
        location:
          $ref: '#/components/schemas/Point'
        type:
          type: string
        name:
          type: string
        description:
          type: string

    Point:
      type: object
      required:
      - lat
      - lon
      properties:
        lat:
          type: number
          example: 47.53484943172696
        lon:
          type: number
          example: 7.612519197679952

    Datum:
      oneOf:
      - $ref: '#/components/schemas/EnvDatum'
      - $ref: '#/components/schemas/PaxDatum'

    EnvDatum:
      type: object
      properties:
        time:
          type: string
          format: date-time
        nodeLabel:
          type: string
          pattern: '\d{4}-\d{4}'
        voltage:
          type: number
          example: 4.8
        voltageUnit:
          type: string
          example: 'V'
        temperature:
          type: number
          example: 7.82
        temperatureUnit:
          type: string
          example: '°C'
        humidity:
          type: number
          example: 93.78
        humidityUnit:
          type: string
          example: '%'
        moisture:
          type: number
          example: 2.6
        moistureUnit:
          type: string
          example: 'g/m³'

    PaxDatum:
      type: object
      properties:
        time:
          type: string
          format: date-time
        nodeLabel:
          type: string
          pattern: '\d{4}-\d{4}'
        voltage:
          type: number
          example: 4.8
        voltageUnit:
          type: string
          example: 'V'
        pax:
          type: integer
          example: 17
        paxUnit:
          type: string
          example: ''

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string

  securitySchemes:

    mitwelten_auth:
      type: http
      scheme: basic

    api_key:
      type: apiKey
      name: api_key
      in: header
