# generated by fastapi-codegen:
#   filename:  viz-schema.yml
#   timestamp: 2022-06-21T16:49:25+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field, constr


class Tag(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None


class Type(Enum):
    env = 'env'
    cam = 'cam'
    pax = 'pax'
    audiomoth = 'audiomoth'
    accesspoint = 'accesspoint'
    appliance = 'appliance'
    air = 'air'


class Comment(BaseModel):
    id: Optional[int] = None
    comment: str = Field(..., example='interesting')
    timeStart: datetime
    timeEnd: Optional[datetime] = None
    author: Optional[str] = None


class Point(BaseModel):
    lat: float = Field(..., example=47.53484943172696)
    lon: float = Field(..., example=7.612519197679952)


class EnvDatum(BaseModel):
    time: Optional[datetime] = None
    nodeLabel: Optional[constr(regex=r'\d{4}-\d{4}')] = None
    voltage: Optional[float] = Field(None, example=4.8)
    voltageUnit: Optional[str] = Field(None, example='V')
    temperature: Optional[float] = Field(None, example=7.82)
    temperatureUnit: Optional[str] = Field(None, example='°C')
    humidity: Optional[float] = Field(None, example=93.78)
    humidityUnit: Optional[str] = Field(None, example='%')
    moisture: Optional[float] = Field(None, example=2.6)
    moistureUnit: Optional[str] = Field(None, example='g/m³')


class PaxDatum(BaseModel):
    time: Optional[datetime] = None
    nodeLabel: Optional[constr(regex=r'\d{4}-\d{4}')] = None
    voltage: Optional[float] = Field(None, example=4.8)
    voltageUnit: Optional[str] = Field(None, example='V')
    pax: Optional[int] = Field(None, example=17)
    paxUnit: Optional[str] = Field(None, example='')


class ApiResponse(BaseModel):
    code: Optional[int] = None
    type: Optional[str] = None
    message: Optional[str] = None


class ApiErrorResponse(BaseModel):
    message: Optional[str] = None


class EntryIdFilePostRequest(BaseModel):
    additionalMetadata: Optional[str] = Field(
        None, description='Additional data to pass to server'
    )
    file: Optional[bytes] = Field(None, description='file to upload')


class DataNodeLabelGetResponse(BaseModel):
    __root__: Union[List[PaxDatum], List[EnvDatum]]


class Entry(BaseModel):
    '''
    This is a user generated "pin" on the map to which files entries can be associated
    '''
    id: Optional[int] = None
    date: Optional[datetime] = Field(None, example='2022-12-31T23:59:59.999Z')
    name: str = Field(..., example='interesting')
    description: Optional[str] = Field(
        None,
        example='I discovered an correlation between air humidity level and visitor count',
    )
    location: Point
    type: Optional[str] = Field(None, example='env')
    tags: Optional[List[Tag]] = None
    comments: Optional[List[Comment]] = None
    fileUrls: Optional[List[str]] = None


class Location(BaseModel):
    id: Optional[int] = None
    location: Point
    type: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None


class Datum(BaseModel):
    __root__: Union[EnvDatum, PaxDatum]


class Node(BaseModel):
    id: Optional[int] = None
    name: constr(regex=r'\d{4}-\d{4}') = Field(..., example='2323-4242')
    location: Location
    type: Type = Field(..., example='env')
    description: Optional[str] = Field(
        None,
        example='Environmental sensor to record humidity, temperature and athmospheric pressure',
    )
